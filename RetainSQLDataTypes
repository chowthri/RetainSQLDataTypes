using System;
using System.Data;
using System.Data.SqlTypes;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

using System;
using System.Data.SqlTypes;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

public class PreserveAllSqlServerDataTypesConverter : JsonConverter
{
    public override bool CanConvert(Type objectType)
    {
        return objectType == typeof(SqlType) || Nullable.GetUnderlyingType(objectType) != null;
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null)
        {
            // Handle null values
            return null;
        }

        JToken token = JToken.Load(reader);

        if (objectType == typeof(SqlType))
        {
            // For SqlType, directly deserialize to the specified type
            return token.ToObject(objectType);
        }
        else if (Nullable.GetUnderlyingType(objectType) != null)
        {
            // For nullable types, get the underlying type and deserialize
            var underlyingType = Nullable.GetUnderlyingType(objectType);
            return token.ToObject(underlyingType);
        }

        throw new InvalidOperationException($"Unexpected object type: {objectType}");
    }

    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        if (value == null)
        {
            // Write null values
            writer.WriteNull();
            return;
        }

        JToken.FromObject(value).WriteTo(writer);
    }
}

var settings = new JsonSerializerSettings
{
    Converters = { new PreserveAllSqlServerDataTypesConverter() },
};

string json = JsonConvert.SerializeObject(yourObject, settings);

