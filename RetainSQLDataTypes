using System;
using System.Data.SqlTypes;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
//v3
using System;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

public class PreserveAllSqlServerDataTypesConverter : JsonConverter
{
    public override bool CanConvert(Type objectType)
    {
        return objectType != null && 
               (objectType.IsClass || (objectType.IsGenericType && objectType.GetGenericTypeDefinition() == typeof(Nullable<>)));
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    JToken token = JToken.Load(reader);

    if (token.Type == JTokenType.String)
    {
        if (bool.TryParse(token.ToString(), out bool result))
        {
            return result;
        }
    }
    else if (token.Type == JTokenType.Integer)
    {
        return (int)token == 1;
    }

    return token.ToObject(objectType);
}

    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        if (value == null)
        {
            // Write null values
            writer.WriteNull();
            return;
        }

        JToken.FromObject(value).WriteTo(writer);
    }
}



var settings = new JsonSerializerSettings
{
    Converters = { new PreserveAllSqlServerDataTypesConverter() },
};

string json = JsonConvert.SerializeObject(yourObject, settings);

